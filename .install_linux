#!/usr/bin/env bash

function pkgmgr_install() {

	local installer="yum"
	if lsb_release -d | grep -i ubuntu &> /dev/null ; then
		installer="apt"
	fi

	if [ ! -z $1 ]; then
		python_version="$1"
	fi

	local pkg
	local pkgs
	local package_ext=`arch`
	for pkg in $@; do
		if [ "$installer" = "apt" ]; then
			pkgs+=("$pkg")
	else
			pkgs+=("$pkg$package_ext")
		fi
	done
	pkgs=`printf "%s " "${pkgs[@]}"`
	sudo $installer install -y $pkgs
}

function pkgmgr_install_python_src() {
	local python_version="$1"
	local install_prefix="$2"
	local package_dir="$USER/Downloads/package"

	# Set python version
	if [ "$python_version" = "" ]; then
		local python_version="2.7.12"
	fi

	# Set install directory
	if [ "$install_prefix" = "" ]; then
		install_prefix="--prefix=$HOME/.local"
	fi

	# Dependencies
	if lsb_release -d | grep -i ubuntu &> /dev/null ; then
		`pkgmgr_install libzzip-dev libssl-dev libreadline-dev libsqlite3-dev build-essential`
	else
		`pkgmgr_install zlib-devel openssl-devel readline-devel sqlite-devel gcc-c++`
	fi

	# Setup environment
	mkdir -p $package_dir

	# Python

	## Download
	wget http://www.python.org/ftp/python/$python_version/Python-$python_version.tgz --directory-prefix=$package_dir

	## Extract
	tar zxf $package_dir/Python-$python_version.tgz -C $package_dir

	## Install
	$package_dir/Python-$python_version/configure $install_prefix
	make $package_dir/Python-$python_version
	if [ "$install_prefix" = "" ]; then
		sudo make install $package_dir/Python-$python_version
	else
		make install $package_dir/Python-$python_version
	fi

	## Cleanup
	rm $package_dir/Python-$python_version.tgz
	rm -fr $package_dir/Python-$python_version

	# Pip

	## Download
	wget https://bootstrap.pypa.io/get-pip.py --directory-prefix=$package_dir

	## Install
	python $package_dir/get-pip.py

	## Cleanup
	rm -fr $package_dir/get-pip.py

	unset package_dir
	unset install_prefix
	unset python_version
}
